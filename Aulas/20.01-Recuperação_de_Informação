RECUPERAÇÃO DE INFORMAÇÃO
===========================

Recuperação de iNformação *information retrieval) é encontrar materiais
(documentos, na maioria dos casos) de uma natureza não estruturada
(texto, na maioria dos casos)que satisfazem uma informação necessária de
dentro de grandescoleções (geralmente armazenadas em computadores)

Informações não-estruturadas não são boas para encontrar informações
dentro do modelo clássico de indexação. O algoritmo tradicional, com 
o uso de árvore B, nao funciona.

Recuperação Booleana
----------------------

O modelo Booleano é com certeza o modelo mais simples para criar o
sistema de recuperação. Ele envolve a lógica booleana e de primeira
ordem.

Mas qual a estrutura de dados para recuperar as informações? A mais
simples possível: uma matriz.

----------|------------|-------|------------|--------|--------|---------|
          | Antônio e  | Júlio |     A      |        |        |         |
          | Cleópatra  | César | Tempestade | Hamlet | Othelo | Macbeth |
----------|------------|-------|------------|--------|--------|---------|
Antônio   |     1      |   1   |     0      |   0    |   0    |    1    |  
Brutus    |     1      |   1   |     0      |   1    |   0    |    0    |  
César     |     1      |   1   |     0      |   1    |   1    |    1    |  
Calpurnia |     0      |   1   |     0      |   0    |   0    |    0    |  
Cleópatra |     1      |   0   |     0      |   0    |   0    |    0    |  
Mercy     |     1      |   0   |     1      |   1    |   1    |    1    |  
Worser    |     1      |   0   |     1      |   1    |   1    |    0    |  
----------|------------|-------|------------|--------|--------|---------|

A indexação de termos não estruturados usa como DOMÍNIO as palavras a
serem buscadas. Elas são indexadas para procurar onde estão os termos
dentro de um documento. Nossa estrutura de dados é, então, uma matriz
booleana esparsa de BITS.

Para responder à query: BRUTUS AND CÉSAR AND NOT CLEÓPATRA basta
operarmos com a álgebra booleana simples:

----------|------------|-------|------------|--------|--------|---------|
          | Antônio e  | Júlio |     A      |        |        |         |
          | Cleópatra  | César | Tempestade | Hamlet | Othelo | Macbeth |
----------|------------|-------|------------|--------|--------|---------|
Antônio   |     1      |   1   |     0      |   0    |   0    |    1    |  
Brutus    |   [ 1 ]    | [ 1 ] |   [ 0 ]    | [ 1 ]  | [ 0 ]  |  [ 0 ]  |  
César     |   [ 1 ]    | [ 1 ] |   [ 0 ]    | [ 1 ]  | [ 1 ]  |  [ 1 ]  |  
Calpurnia |     0      |   1   |     0      |   0    |   0    |    0    |  
Cleópatra |   [ 1 ]    | [ 0 ] |   [ 0 ]    | [ 0 ]  | [ 0 ]  |  [ 0 ]  |  
Mercy     |     1      |   0   |     1      |   1    |   1    |    1    |  
Worser    |     1      |   0   |     1      |   1    |   1    |    0    |  
----------|------------|-------|------------|--------|--------|---------|
RESULT    |     0      |   1   |     0      |   1    |   0    |    0    |  

Fica trivial identificar quais são os documentos, usando operações
lógicas AND/OR/NOT da Álgebra Booleana.

Porém, temos um probema: criar a matriz é trivial, mas alocá-la é um
grande problema. Como a matriz é esparsa, teremos muito menos 1 do que
0's. A soluçãoé o ARQUIVO INVERTIDO

INVERTED INDEX (ARQUIVO/ÍNDICE INVERTIDO)
===========================================

.-----------.    .---.----.----.-----.----.----.-----.-----.
| Brutus    | →  | 1 |  2 |  3 |  11 | 31 | 45 | 173 | 174 |
'-----------'    '---'----'----'-----'----'----'-----'-----'
.-----------.    .---.----.----.-----.----.----.-----.-----. 
| César     | →  | 1 |  2 |  4 |   5 |  6 | 16 |  57 | 132 | ... 
'-----------'    '---'----'----'-----'----'----'-----'-----'
.-----------.    .---.----.----.-----.
| Calpurnia | →  | 2 | 31 | 54 | 101 |
'-----------'    '---'----'----'-----'
  Dicionário      Post (id do documento)

Tokenização e pré-processamento
---------------------------------
O objetivo do pré-processamento é criar uma forma de organizar palavras
de um texto na estrutura do índice invertido. Depois, ela poderá ser
juntado na lista com Dicionário e Posts. Isso é feito criando uma matriz
inicial que contém as palavras que ocorreram associadas aos id's do
documento de onde foram extraídas.

Usando esta tabela inicial, adicionamos as informações dentro do arquivo
invertido. Uma informação extra também é a quantidade de documentos em 
que uma dada palavra ocorre. 

Encontrar quantas vezes uma palavra ocorre dentro do texto não é
armazenado nesta estrutura. Mas este é um problema diferente. 

Operadores Booleanos
----------------------

* Query "Brutus AND Calpurnia"
    - Algoritmo
        - Localizar Brutus no dicionário
        - Recuperar suas listas
        - Localizar Calpurnia no dicionário
        - Recuperar suas listas
        - Fazer a intersecção das duas listas
    
    - Complexidade
      Como as listas são ordenadas pelos id's, a complexidade 
      desse algoritmo é Θ(m+n), o tamanho de ambas as listas.

Todas as querys têm funcionamento similar, e os algoritmos dependem,
no nivel mais básico, de operações de conjuntos (intersecção, união,
complemento, etc)

RANKEAMENTO
=============

A Indexação é mantida com as estruturas de dados mostradas. Porém, uma
vez indexados, novos problemas surgem: como ORDENAR a informação, quando
ela está em escala de milhões? Buscar em tudo é impossível. Descobrir
como RANKEAR documentos, conceito dependente de RELEVÂNCIA, é um dos
problemas mais importantes para a atualidade.

Como, então, definir quais documentos são mais relevantes que outros?

Coeficiente de Jaccard
------------------------

* Um método comum para medir quão parecidos são dois documentos
* Sejam A e B dois conjuntos. O Coeficiente de Jaccard é:

            JACCARD(A,B) = |A ∩ B|, se A ≠ ∅  ou B ≠ ∅
                           -------
                           |A U B|

* Propriedades
    - JACCARD(A,A)  = 1
    - JACCARD(A,∅ ) = 0
    - JACCARD(A,B)  = 0, se A ∩ B = ∅

* Esse método vale para qualquer tipo de conjunto
* O Coeficiente de Jaccard nos permite COMPARAR conjuntos, nos dando o 
  grau de similaridade entre eles. Porém, não necessariamente nos dá 
  uma ORDENAÇÃO entre conjuntos. Dado um documento A, podemos ordenar 
  segundo Coeficiente de Jaccard. Mas esse coeficiente, por si próprio,
  não nos dá uma ordenação.
* O Coeficiente de Jaccard tem um problema: ele não leva em conta a
  FREQUÊNCIA DO APARECIMENTO de palavras entre documentos.

FREQUÊNCIA DE TERMOS
======================
Podemos montar uma segunda matriz com uma CONTAGEM de quantas vezes
certo termo aparece dentro do documento. Essa contagem não considera a
ordem em qua as palavras aparecem.

----------|------------|-------|------------|--------|--------|---------|
          | Antônio e  | Júlio |     A      |        |        |         |
          | Cleópatra  | César | Tempestade | Hamlet | Othelo | Macbeth |
----------|------------|-------|------------|--------|--------|---------|
Antônio   |    157     |   10  |    ...     |  ...   |  ...   |   ...   |  
Brutus    |      0     |   73  |    ...     |  ...   |  ...   |   ...   |  
César     |    232     |  227  |    ...     |  ...   |  ...   |   ...   |  
Calpurnia |      0     |    0  |    ...     |  ...   |  ...   |   ...   |  
Cleópatra |     57     |    0  |    ...     |  ...   |  ...   |   ...   |  
Mercy     |      0     |    0  |    ...     |  ...   |  ...   |   ...   |  
Worser    |      0     |    0  |    ...     |  ...   |  ...   |   ...   |  
----------|------------|-------|------------|--------|--------|---------|

Esse conceito é um SACO DE PALAVRAS - elas não estão ordenadas.

Frequência de Termos (tf)
---------------------------
* O termo de frequência (tf_t,d) do termo t no documento d é definido
  como o número de vezes que t ocorreem d
* Podemos ver a relevância de duas maneiras: pela quantidade de
  ocorrência, ou pela raridade das ocorrências. Ambas as medidas
  poderiam ser válidas.
* Para não termos tanto impacto do peso das ocorrências, usamos a
  base logarítmica 10 para suavizar este efeito:

            w_t,d = { 1+log_10(tf_t,d) se tf_t,d > 0
                    { 0, caso contrário
* Propriedades:
    - 0 → 0, 1 → 1, 2 → 1,3 10 → 2, 1000 → 4, etc.

* A pontuação para um par de documentos-query: soma de todos os termos 
  t que estão em ambos q e d:

        matching-score(q,d) = Σ_t∈ q∩ d (1 + log tf_t,d)

  "q" será a query e "d" será o documento. Estamos medindo quantas vezes
  os elementos de "q" aparecem em "d". Os termos de "q" que não estão em
  "d" OU os termos de "d" que estão em "q" não são contados.

  Estas novas medidas não são como o SQL, que era PRECISO e nos
  retornava tudo que estava ou não. O método de matching-score não
  é tão preciso. Ele nos ajuda a obter um critério para ordenar/rankear 
  vários documentos (em ordem crescente ou decrescente) de valores.

Termos raros (idf)
--------------------

* O nosso método de matching-score não considera se uma palavra é rara 
  - algo que poderia ser bem informativo.
* Nossa nova medida considerará df_t, o número de documentos que têm o
  termo t
* Definiremos o peso idf do termo t como sendo:
        
            idf_t = log_10(N/df_t), N := número de documentos

* O idf_t é uma medida de falta e informação do termo - quão raro ele é
  dentro do total de termos. O logaritmo ajuda, novamente, a SUAVIZAR a
  proporção N/df_t.

Medida de frequência ponderada por termos raros (tf-idf)
----------------------------------------------------------

* Nomes alternativos: tf.idf tf x idf
* É uma medida que usa ambas as informações, ponderadas usando ambas
  as medidas mostradas anteriormente:
    
                w_t,d = (1+log(tf_t,d)) * log(N/df_t)

